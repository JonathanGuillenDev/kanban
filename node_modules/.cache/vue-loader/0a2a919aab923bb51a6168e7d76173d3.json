{"remainingRequest":"C:\\Users\\terme\\Documents\\GitHub\\kanban\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\terme\\Documents\\GitHub\\kanban\\src\\components\\CardsList.vue?vue&type=style&index=0&id=b6e93bbe&lang=css","dependencies":[{"path":"C:\\Users\\terme\\Documents\\GitHub\\kanban\\src\\components\\CardsList.vue","mtime":1753122760947},{"path":"C:\\Users\\terme\\Documents\\GitHub\\kanban\\node_modules\\css-loader\\dist\\cjs.js","mtime":1752807270600},{"path":"C:\\Users\\terme\\Documents\\GitHub\\kanban\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1752860046863},{"path":"C:\\Users\\terme\\Documents\\GitHub\\kanban\\node_modules\\postcss-loader\\src\\index.js","mtime":1752807273109},{"path":"C:\\Users\\terme\\Documents\\GitHub\\kanban\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1752807269900},{"path":"C:\\Users\\terme\\Documents\\GitHub\\kanban\\node_modules\\vue-loader\\lib\\index.js","mtime":1752860046809}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQovKiBTdHlsZXMgcmVtYWluIHRoZSBzYW1lICovDQouYm9hcmRzIHsNCiAgZGlzcGxheTogZ3JpZDsNCiAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiByZXBlYXQoMywgMWZyKTsNCiAgZ3JpZC1nYXA6IDE1cHg7DQp9DQouYm9hcmQtYWN0aW9ucyB7DQogIHRleHQtYWxpZ246IGNlbnRlcjsNCiAgcGFkZGluZzogMTVweCAwOw0KfQ0KLmJvYXJkLWFjdGlvbnMgYTpsaW5rLA0KLmJvYXJkLWFjdGlvbnMgYTp2aXNpdGVkIHsNCiAgY29sb3I6IGJsdWU7DQogIHRleHQtZGVjb3JhdGlvbjogbm9uZTsNCn0NCi5ib2FyZC1hY3Rpb25zIGE6aG92ZXIgew0KICB0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZTsNCn0NCi5idG4uYWRkTmV3Q2FyZCB7DQogIGNvbG9yOiAjZmZmOw0KICBiYWNrZ3JvdW5kLWNvbG9yOiAjNTA4Y2E4Ow0KICBib3JkZXItY29sb3I6ICM1MDhjYTg7DQp9DQouaGVhZGVyIHsNCiAgZGlzcGxheTogZmxleDsNCiAgYWxpZ24taXRlbXM6IGNlbnRlcjsNCn0NCi5oZWFkZXIgaDEgew0KICBmbGV4LWdyb3c6IDE7DQp9DQo="},{"version":3,"sources":["CardsList.vue"],"names":[],"mappings":";AAoIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"CardsList.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n  <div>\r\n    <div class=\"header\">\r\n      <h1>{{ boardTitle }}</h1>\r\n      <router-link\r\n        :to=\"{ name: 'AddCard', params: {boardID: this.boardId} }\"\r\n        custom\r\n        v-slot=\"{ navigate }\"\r\n        v-if=\"!isLoading\"\r\n      >\r\n        <button @click=\"navigate\" role=\"link\" class=\"btn addNewCard\">Add New Card</button>\r\n      </router-link>\r\n\r\n      <button\r\n        class=\"btn btn-cancel deleteBoard\"\r\n        v-if=\"!isLoading\"\r\n        @click=\"deleteBoardConfirmed\"\r\n      >Delete Board</button>\r\n    </div>\r\n    <div class=\"loading\" v-if=\"isLoading\">\r\n      <img src=\"../assets/ping_pong_loader.gif\" alt=\"Loading...\" />\r\n    </div>\r\n    <div v-else>\r\n      <div class=\"status-message error\" v-show=\"errorMsg !== ''\">{{errorMsg}}</div>\r\n      <div class=\"boards\">\r\n        <board-column title=\"Planned\" :boardID=\"this.boardId\" columnStatus=\"Planned\" />\r\n        <board-column title=\"In Progress\" :boardID=\"this.boardId\" columnStatus=\"In Progress\" />\r\n        <board-column title=\"Completed\" :boardID=\"this.boardId\" columnStatus=\"Completed\" />\r\n      </div>\r\n    </div>\r\n    <div class=\"board-actions\" v-if=\"!isLoading\">\r\n      <router-link to=\"/\">Back to Boards</router-link>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport BoardColumn from \"@/components/BoardColumn\";\r\nimport { mapGetters, mapActions } from 'vuex';\r\n\r\nexport default {\r\n  name: \"cards-list\",\r\n  components: {\r\n    BoardColumn\r\n  },\r\n  data() {\r\n    return {\r\n      // FIX: 'title' data property is no longer needed if boardTitle is derived from Vuex\r\n      // title: \"\",\r\n      boardId: 0,\r\n      isLoading: true,\r\n      errorMsg: \"\"\r\n    };\r\n  },\r\n  methods: {\r\n    ...mapActions(['fetchBoardCards', 'deleteBoard']), // Map actions\r\n\r\n    async retrieveCards() {\r\n      this.isLoading = true;\r\n      this.errorMsg = \"\";\r\n      try {\r\n        // FIX: Remove the backend service call.\r\n        // The board title will now come from a computed property using Vuex state.\r\n        // We only need to dispatch fetchBoardCards to populate boardCards state.\r\n        await this.fetchBoardCards(this.boardId);\r\n\r\n        // FIX: Check if the board itself exists in the store\r\n        if (!this.currentBoard) {\r\n            this.errorMsg = \"Board not found. It may have been deleted or you have entered an invalid board ID.\";\r\n            alert(this.errorMsg);\r\n            this.$router.push(\"/\");\r\n            return; // Stop execution if board not found\r\n        }\r\n\r\n      } catch (error) {\r\n        // This catch block might still trigger if fetchBoardCards has an issue\r\n        // (though less likely with local data).\r\n        console.error(\"Error in retrieveCards (CardsList.vue):\", error);\r\n        this.errorMsg = \"Error retrieving board details or cards. Please try again.\";\r\n      } finally {\r\n        this.isLoading = false;\r\n      }\r\n    },\r\n    async deleteBoardConfirmed() {\r\n      if (confirm(\"Deleting this board deletes all cards. There's no undo. Are you sure?\")){\r\n        try {\r\n          // No need to check for response.status === 200, as Vuex action directly modifies state\r\n          await this.deleteBoard(this.boardId);\r\n          alert(\"Board successfully deleted.\");\r\n          this.$router.push(\"/\");\r\n        } catch (error) {\r\n          // This catch is mostly for errors within the Vuex action itself (e.g., if boardId is invalid internally)\r\n          this.errorMsg = \"Error deleting board locally. See console for details.\";\r\n          console.error(\"Error deleting board:\", error);\r\n        }\r\n      }\r\n    }\r\n  },\r\n  created() {\r\n    this.boardId = Number(this.$route.params.id); // Ensure boardId is a number\r\n    // FIX: Add watcher for route ID changes\r\n    // Initial fetch is handled by immediate: true in the watcher\r\n    // If you prefer to keep created, make immediate: false in watcher and uncomment this:\r\n    // this.retrieveCards();\r\n  },\r\n  // FIX: Watch for changes in the route's boardID\r\n  watch: {\r\n    '$route.params.id': {\r\n      immediate: true, // Run immediately on component creation\r\n      handler(newBoardId) {\r\n        if (newBoardId) { // Only run if newBoardId is defined\r\n          this.boardId = Number(newBoardId);\r\n          this.retrieveCards();\r\n        }\r\n      }\r\n    }\r\n  },\r\n  computed: {\r\n    ...mapGetters(['allBoards']), // Map allBoards getter from store\r\n    // FIX: Get the current board from the store based on boardId\r\n    currentBoard() {\r\n      return this.allBoards.find(board => board.id === this.boardId);\r\n    },\r\n    // FIX: Derive boardTitle from currentBoard\r\n    boardTitle() {\r\n      return this.currentBoard ? this.currentBoard.title : 'Loading Board...';\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style>\r\n/* Styles remain the same */\r\n.boards {\r\n  display: grid;\r\n  grid-template-columns: repeat(3, 1fr);\r\n  grid-gap: 15px;\r\n}\r\n.board-actions {\r\n  text-align: center;\r\n  padding: 15px 0;\r\n}\r\n.board-actions a:link,\r\n.board-actions a:visited {\r\n  color: blue;\r\n  text-decoration: none;\r\n}\r\n.board-actions a:hover {\r\n  text-decoration: underline;\r\n}\r\n.btn.addNewCard {\r\n  color: #fff;\r\n  background-color: #508ca8;\r\n  border-color: #508ca8;\r\n}\r\n.header {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n.header h1 {\r\n  flex-grow: 1;\r\n}\r\n</style>"]}]}