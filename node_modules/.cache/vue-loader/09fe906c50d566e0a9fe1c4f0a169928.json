{"remainingRequest":"C:\\Users\\terme\\Documents\\GitHub\\kanban\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\terme\\Documents\\GitHub\\kanban\\src\\components\\CardForm.vue?vue&type=script&lang=js","dependencies":[{"path":"C:\\Users\\terme\\Documents\\GitHub\\kanban\\src\\components\\CardForm.vue","mtime":1753119920307},{"path":"C:\\Users\\terme\\Documents\\GitHub\\kanban\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1752807269900},{"path":"C:\\Users\\terme\\Documents\\GitHub\\kanban\\node_modules\\babel-loader\\lib\\index.js","mtime":1752807269607},{"path":"C:\\Users\\terme\\Documents\\GitHub\\kanban\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1752807269900},{"path":"C:\\Users\\terme\\Documents\\GitHub\\kanban\\node_modules\\vue-loader\\lib\\index.js","mtime":1752860046809}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQppbXBvcnQgbW9tZW50IGZyb20gIm1vbWVudCI7DQppbXBvcnQgeyBtYXBBY3Rpb25zLCBtYXBHZXR0ZXJzIH0gZnJvbSAndnVleCc7IC8vIEltcG9ydCBtYXBBY3Rpb25zIGFuZCBtYXBHZXR0ZXJzDQoNCmV4cG9ydCBkZWZhdWx0IHsNCiAgbmFtZTogImNhcmQtZm9ybSIsDQogIHByb3BzOiB7DQogICAgY2FyZElEOiB7DQogICAgICB0eXBlOiBOdW1iZXIsDQogICAgICBkZWZhdWx0OiAwDQogICAgfQ0KICB9LA0KICBkYXRhKCkgew0KICAgIHJldHVybiB7DQogICAgICBjYXJkOiB7DQogICAgICAgIHRpdGxlOiAiIiwNCiAgICAgICAgZGVzY3JpcHRpb246ICIiLA0KICAgICAgICBzdGF0dXM6ICJQbGFubmVkIiwNCiAgICAgICAgdGFnOiAiIiwNCiAgICAgICAgZGF0ZTogbnVsbA0KICAgICAgfSwNCiAgICAgIGVycm9yTXNnOiAiIg0KICAgIH07DQogIH0sDQogIG1ldGhvZHM6IHsNCiAgICAuLi5tYXBBY3Rpb25zKFsnYWRkTmV3Q2FyZCcsICd1cGRhdGVFeGlzdGluZ0NhcmQnLCAnZmV0Y2hDYXJkRGV0YWlsJ10pLCAvLyBNYXAgYWN0aW9ucw0KDQogICAgYXN5bmMgc3VibWl0Rm9ybSgpIHsNCiAgICAgIGNvbnN0IGNhcmREYXRhID0gew0KICAgICAgICBib2FyZElkOiBOdW1iZXIodGhpcy4kcm91dGUucGFyYW1zLmJvYXJkSUQpLA0KICAgICAgICB0aXRsZTogdGhpcy5jYXJkLnRpdGxlLA0KICAgICAgICBkZXNjcmlwdGlvbjogdGhpcy5jYXJkLmRlc2NyaXB0aW9uLA0KICAgICAgICBzdGF0dXM6IHRoaXMuY2FyZC5zdGF0dXMsDQogICAgICAgIHRhZzogdGhpcy5jYXJkLnRhZywNCiAgICAgIH07DQoNCiAgICAgIGlmICh0aGlzLmNhcmRJRCA9PT0gMCkgew0KICAgICAgICAvLyBBZGQgbmV3IGNhcmQNCiAgICAgICAgY2FyZERhdGEuZGF0ZSA9IG1vbWVudCgpLmZvcm1hdCgiTU1NIERvIFlZWVkiKTsNCiAgICAgICAgdHJ5IHsNCiAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHRoaXMuYWRkTmV3Q2FyZChjYXJkRGF0YSk7DQogICAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PT0gMjAxKSB7DQogICAgICAgICAgICB0aGlzLiRyb3V0ZXIucHVzaChgL2JvYXJkLyR7Y2FyZERhdGEuYm9hcmRJZH1gKTsNCiAgICAgICAgICB9DQogICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7DQogICAgICAgICAgdGhpcy5oYW5kbGVFcnJvclJlc3BvbnNlKGVycm9yLCAiYWRkaW5nIik7DQogICAgICAgIH0NCiAgICAgIH0gZWxzZSB7DQogICAgICAgIC8vIFVwZGF0ZSBleGlzdGluZyBjYXJkDQogICAgICAgIGNhcmREYXRhLmlkID0gdGhpcy5jYXJkSUQ7DQogICAgICAgIGNhcmREYXRhLmRhdGUgPSB0aGlzLmNhcmQuZGF0ZTsgLy8gUHJlc2VydmUgb3JpZ2luYWwgZGF0ZSBmb3IgdXBkYXRlcw0KICAgICAgICB0cnkgew0KICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy51cGRhdGVFeGlzdGluZ0NhcmQoY2FyZERhdGEpOw0KICAgICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT09IDIwMCkgew0KICAgICAgICAgICAgdGhpcy4kcm91dGVyLnB1c2goYC9ib2FyZC8ke2NhcmREYXRhLmJvYXJkSWR9YCk7DQogICAgICAgICAgfQ0KICAgICAgICB9IGNhdGNoIChlcnJvcikgew0KICAgICAgICAgIHRoaXMuaGFuZGxlRXJyb3JSZXNwb25zZShlcnJvciwgInVwZGF0aW5nIik7DQogICAgICAgIH0NCiAgICAgIH0NCiAgICB9LA0KICAgIGNhbmNlbEZvcm0oKSB7DQogICAgICB0aGlzLiRyb3V0ZXIucHVzaChgL2JvYXJkLyR7dGhpcy4kcm91dGUucGFyYW1zLmJvYXJkSUR9YCk7DQogICAgfSwNCiAgICBoYW5kbGVFcnJvclJlc3BvbnNlKGVycm9yLCB2ZXJiKSB7DQogICAgICBpZiAoZXJyb3IucmVzcG9uc2UpIHsNCiAgICAgICAgdGhpcy5lcnJvck1zZyA9IGBFcnJvciAke3ZlcmJ9IGNhcmQuIFJlc3BvbnNlIHJlY2VpdmVkIHdhcyAnJHtlcnJvci5yZXNwb25zZS5zdGF0dXNUZXh0fScuYDsNCiAgICAgIH0gZWxzZSBpZiAoZXJyb3IucmVxdWVzdCkgew0KICAgICAgICB0aGlzLmVycm9yTXNnID0gYEVycm9yICR7dmVyYn0gY2FyZC4gU2VydmVyIGNvdWxkIG5vdCBiZSByZWFjaGVkLmA7DQogICAgICB9IGVsc2Ugew0KICAgICAgICB0aGlzLmVycm9yTXNnID0gYEVycm9yICR7dmVyYn0gY2FyZC4gUmVxdWVzdCBjb3VsZCBub3QgYmUgY3JlYXRlZC5gOw0KICAgICAgfQ0KICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7DQogICAgfQ0KICB9LA0KICBhc3luYyBjcmVhdGVkKCkgew0KICAgIGlmICh0aGlzLmNhcmRJRCAhPT0gMCkgew0KICAgICAgdHJ5IHsNCiAgICAgICAgLy8gRmV0Y2ggY2FyZCBkZXRhaWwgaW50byB0aGUgc3RvcmUNCiAgICAgICAgYXdhaXQgdGhpcy5mZXRjaENhcmREZXRhaWwodGhpcy5jYXJkSUQpOw0KICAgICAgICAvLyBQb3B1bGF0ZSBsb2NhbCBjYXJkIGRhdGEgZnJvbSB0aGUgc3RvcmUncyBjdXJyZW50Q2FyZA0KICAgICAgICB0aGlzLmNhcmQgPSB7IC4uLnRoaXMuY3VycmVudENhcmQgfTsgLy8gVXNlIHNwcmVhZCB0byBjcmVhdGUgYSBjb3B5LCBub3QgYSByZWZlcmVuY2UNCiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7DQogICAgICAgIGlmIChlcnJvci5yZXNwb25zZSAmJiBlcnJvci5yZXNwb25zZS5zdGF0dXMgPT09IDQwNCkgew0KICAgICAgICAgIGFsZXJ0KCJDYXJkIG5vdCBhdmFpbGFibGUuIFRoaXMgY2FyZCBtYXkgaGF2ZSBiZWVuIGRlbGV0ZWQgb3IgeW91IGhhdmUgZW50ZXJlZCBhbiBpbnZhbGlkIGNhcmQgSUQuIik7DQogICAgICAgICAgdGhpcy4kcm91dGVyLnB1c2goIi8iKTsNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgIHRoaXMuaGFuZGxlRXJyb3JSZXNwb25zZShlcnJvciwgInJldHJpZXZpbmciKTsNCiAgICAgICAgfQ0KICAgICAgfQ0KICAgIH0NCiAgfSwNCiAgY29tcHV0ZWQ6IHsNCiAgICAgIC4uLm1hcEdldHRlcnMoWydjdXJyZW50Q2FyZCddKSAvLyBHZXQgdGhlIGN1cnJlbnQgY2FyZCBmcm9tIHRoZSBzdG9yZQ0KICB9LA0KICAvLyBJZiB5b3UgbmVlZCB0byByZWFjdCB0byBjdXJyZW50Q2FyZCBjaGFuZ2luZyBhZnRlciBpbml0aWFsIGxvYWQgKGUuZy4sIGlmIGFub3RoZXIgY29tcG9uZW50IHVwZGF0ZXMgaXQpDQogIHdhdGNoOiB7DQogICAgY3VycmVudENhcmQ6IHsNCiAgICAgIGhhbmRsZXIobmV3Q2FyZCkgew0KICAgICAgICAvLyBVcGRhdGUgbG9jYWwgY2FyZCBkYXRhIGlmIHRoZSBzdG9yZSdzIGN1cnJlbnRDYXJkIGNoYW5nZXMsIGJ1dCBvbmx5IGlmIGl0J3Mgbm90IGVtcHR5DQogICAgICAgIGlmIChuZXdDYXJkICYmIE9iamVjdC5rZXlzKG5ld0NhcmQpLmxlbmd0aCA+IDAgJiYgdGhpcy5jYXJkSUQgIT09IDApIHsNCiAgICAgICAgICAgIHRoaXMuY2FyZCA9IHsgLi4ubmV3Q2FyZCB9Ow0KICAgICAgICB9DQogICAgICB9LA0KICAgICAgZGVlcDogdHJ1ZSwgLy8gV2F0Y2ggZm9yIG5lc3RlZCBjaGFuZ2VzDQogICAgICBpbW1lZGlhdGU6IHRydWUgLy8gUnVuIGhhbmRsZXIgaW1tZWRpYXRlbHkgd2l0aCB0aGUgY3VycmVudCB2YWx1ZQ0KICAgIH0NCiAgfQ0KfTsNCg=="},{"version":3,"sources":["CardForm.vue"],"names":[],"mappings":";AA+BA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"CardForm.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n  <form v-on:submit.prevent=\"submitForm\" class=\"cardForm\">\r\n    <div class=\"status-message error\" v-show=\"errorMsg !== ''\">{{errorMsg}}</div>\r\n    <div class=\"form-group\">\r\n      <label for=\"title\">Title:</label>\r\n      <input id=\"title\" type=\"text\" class=\"form-control\" v-model=\"card.title\" autocomplete=\"off\" />\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label for=\"tag\">Tag:</label>\r\n      <select id=\"tag\" class=\"form-control\" v-model=\"card.tag\">\r\n        <option value=\"Feature Request\">Feature Request</option>\r\n        <option value=\"Design\">Design</option>\r\n        <option value=\"Q&A\">Q&A</option>\r\n      </select>\r\n      <label for=\"status\">Status:</label>\r\n      <select id=\"tag\" class=\"form-control\" v-model=\"card.status\">\r\n        <option value=\"Planned\">Planned</option>\r\n        <option value=\"In Progress\">In Progress</option>\r\n        <option value=\"Completed\">Completed</option>\r\n      </select>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <label for=\"description\">Description:</label>\r\n      <textarea id=\"description\" class=\"form-control\" v-model=\"card.description\"></textarea>\r\n    </div>\r\n    <button class=\"btn btn-submit\">Submit</button>\r\n    <button class=\"btn btn-cancel\" v-on:click.prevent=\"cancelForm\" type=\"cancel\">Cancel</button>\r\n  </form>\r\n</template>\r\n\r\n<script>\r\nimport moment from \"moment\";\r\nimport { mapActions, mapGetters } from 'vuex'; // Import mapActions and mapGetters\r\n\r\nexport default {\r\n  name: \"card-form\",\r\n  props: {\r\n    cardID: {\r\n      type: Number,\r\n      default: 0\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      card: {\r\n        title: \"\",\r\n        description: \"\",\r\n        status: \"Planned\",\r\n        tag: \"\",\r\n        date: null\r\n      },\r\n      errorMsg: \"\"\r\n    };\r\n  },\r\n  methods: {\r\n    ...mapActions(['addNewCard', 'updateExistingCard', 'fetchCardDetail']), // Map actions\r\n\r\n    async submitForm() {\r\n      const cardData = {\r\n        boardId: Number(this.$route.params.boardID),\r\n        title: this.card.title,\r\n        description: this.card.description,\r\n        status: this.card.status,\r\n        tag: this.card.tag,\r\n      };\r\n\r\n      if (this.cardID === 0) {\r\n        // Add new card\r\n        cardData.date = moment().format(\"MMM Do YYYY\");\r\n        try {\r\n          const response = await this.addNewCard(cardData);\r\n          if (response.status === 201) {\r\n            this.$router.push(`/board/${cardData.boardId}`);\r\n          }\r\n        } catch (error) {\r\n          this.handleErrorResponse(error, \"adding\");\r\n        }\r\n      } else {\r\n        // Update existing card\r\n        cardData.id = this.cardID;\r\n        cardData.date = this.card.date; // Preserve original date for updates\r\n        try {\r\n          const response = await this.updateExistingCard(cardData);\r\n          if (response.status === 200) {\r\n            this.$router.push(`/board/${cardData.boardId}`);\r\n          }\r\n        } catch (error) {\r\n          this.handleErrorResponse(error, \"updating\");\r\n        }\r\n      }\r\n    },\r\n    cancelForm() {\r\n      this.$router.push(`/board/${this.$route.params.boardID}`);\r\n    },\r\n    handleErrorResponse(error, verb) {\r\n      if (error.response) {\r\n        this.errorMsg = `Error ${verb} card. Response received was '${error.response.statusText}'.`;\r\n      } else if (error.request) {\r\n        this.errorMsg = `Error ${verb} card. Server could not be reached.`;\r\n      } else {\r\n        this.errorMsg = `Error ${verb} card. Request could not be created.`;\r\n      }\r\n      console.error(error);\r\n    }\r\n  },\r\n  async created() {\r\n    if (this.cardID !== 0) {\r\n      try {\r\n        // Fetch card detail into the store\r\n        await this.fetchCardDetail(this.cardID);\r\n        // Populate local card data from the store's currentCard\r\n        this.card = { ...this.currentCard }; // Use spread to create a copy, not a reference\r\n      } catch (error) {\r\n        if (error.response && error.response.status === 404) {\r\n          alert(\"Card not available. This card may have been deleted or you have entered an invalid card ID.\");\r\n          this.$router.push(\"/\");\r\n        } else {\r\n            this.handleErrorResponse(error, \"retrieving\");\r\n        }\r\n      }\r\n    }\r\n  },\r\n  computed: {\r\n      ...mapGetters(['currentCard']) // Get the current card from the store\r\n  },\r\n  // If you need to react to currentCard changing after initial load (e.g., if another component updates it)\r\n  watch: {\r\n    currentCard: {\r\n      handler(newCard) {\r\n        // Update local card data if the store's currentCard changes, but only if it's not empty\r\n        if (newCard && Object.keys(newCard).length > 0 && this.cardID !== 0) {\r\n            this.card = { ...newCard };\r\n        }\r\n      },\r\n      deep: true, // Watch for nested changes\r\n      immediate: true // Run handler immediately with the current value\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style>\r\n/* Styles remain the same */\r\n.cardForm {\r\n  padding: 10px;\r\n  margin-bottom: 10px;\r\n}\r\n.form-group {\r\n  margin-bottom: 10px;\r\n  margin-top: 10px;\r\n}\r\nlabel {\r\n  display: inline-block;\r\n  margin-bottom: 0.5rem;\r\n}\r\n.form-control {\r\n  display: block;\r\n  width: 80%;\r\n  height: 30px;\r\n  padding: 0.375rem 0.75rem;\r\n  font-size: 1rem;\r\n  font-weight: 400;\r\n  line-height: 1.5;\r\n  color: #495057;\r\n  border: 1px solid #ced4da;\r\n  border-radius: 0.25rem;\r\n}\r\ntextarea.form-control {\r\n  height: 75px;\r\n  font-family: Arial, Helvetica, sans-serif;\r\n}\r\nselect.form-control {\r\n  width: 20%;\r\n  display: inline-block;\r\n  margin: 10px 20px 10px 10px;\r\n}\r\n.btn-submit {\r\n  color: #fff;\r\n  background-color: #0062cc;\r\n  border-color: #005cbf;\r\n}\r\n.btn-cancel {\r\n  color: #fff;\r\n  background-color: #dc3545;\r\n  border-color: #dc3545;\r\n}\r\n.status-message {\r\n  display: block;\r\n  border-radius: 5px;\r\n  font-weight: bold;\r\n  font-size: 1rem;\r\n  text-align: center;\r\n  padding: 10px;\r\n  margin-bottom: 10px;\r\n}\r\n.status-message.success {\r\n  background-color: #90ee90;\r\n}\r\n.status-message.error {\r\n  background-color: #f08080;\r\n}\r\n</style>"]}]}