{"remainingRequest":"/Users/Jonathan/Desktop/Java/module-3/17_Web_Services_POST/lecture-final/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/Jonathan/Desktop/Java/module-3/17_Web_Services_POST/lecture-final/src/components/CardsList.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/Users/Jonathan/Desktop/Java/module-3/17_Web_Services_POST/lecture-final/src/components/CardsList.vue","mtime":1617676642000},{"path":"/Users/Jonathan/Desktop/Java/module-3/17_Web_Services_POST/lecture-final/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/Jonathan/Desktop/Java/module-3/17_Web_Services_POST/lecture-final/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/Jonathan/Desktop/Java/module-3/17_Web_Services_POST/lecture-final/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/Jonathan/Desktop/Java/module-3/17_Web_Services_POST/lecture-final/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/Jonathan/Desktop/Java/module-3/17_Web_Services_POST/lecture-final/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLmJvYXJkcyB7CiAgZGlzcGxheTogZ3JpZDsKICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IHJlcGVhdCgzLCAxZnIpOwogIGdyaWQtZ2FwOiAyMHB4Owp9Ci5ib2FyZC1hY3Rpb25zIHsKICB0ZXh0LWFsaWduOiBjZW50ZXI7CiAgcGFkZGluZzogMjBweCAwOwp9Ci5ib2FyZC1hY3Rpb25zIGE6bGluaywKLmJvYXJkLWFjdGlvbnMgYTp2aXNpdGVkIHsKICBjb2xvcjogYmx1ZTsKICB0ZXh0LWRlY29yYXRpb246IG5vbmU7Cn0KLmJvYXJkLWFjdGlvbnMgYTpob3ZlciB7CiAgdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmU7Cn0KLmJ0bi5hZGROZXdDYXJkIHsKICBjb2xvcjogI2ZmZjsKICBiYWNrZ3JvdW5kLWNvbG9yOiAjNTA4Y2E4OwogIGJvcmRlci1jb2xvcjogIzUwOGNhODsKfQouaGVhZGVyIHsKICBkaXNwbGF5OiBmbGV4OwogIGFsaWduLWl0ZW1zOiBjZW50ZXI7Cn0KLmhlYWRlciBoMSB7CiAgZmxleC1ncm93OiAxOwp9Cg=="},{"version":3,"sources":["CardsList.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"CardsList.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div>\n    <div class=\"header\">\n      <h1>{{ title }}</h1>\n      <router-link\n        tag=\"button\"\n        class=\"btn addNewCard\"\n        :to=\"{ name: 'AddCard', params: {boardID: this.boardId} }\"\n        v-if=\"!isLoading\"\n      >Add New Card</router-link>\n      <button\n        class=\"btn btn-cancel deleteBoard\"\n        v-if=\"!isLoading\"\n        v-on:click=\"deleteBoard\"\n      >Delete Board</button>\n    </div>\n    <div class=\"loading\" v-if=\"isLoading\">\n      <img src=\"../assets/ping_pong_loader.gif\" />\n    </div>\n    <div v-else>\n      <div class=\"status-message error\" v-show=\"errorMsg !== ''\">{{errorMsg}}</div>\n      <div class=\"boards\">\n        <board-column title=\"Planned\" :cards=\"planned\" :boardID=\"this.boardId\" />\n        <board-column title=\"In Progress\" :cards=\"inProgress\" :boardID=\"this.boardId\" />\n        <board-column title=\"Completed\" :cards=\"completed\" :boardID=\"this.boardId\" />\n      </div>\n    </div>\n    <div class=\"board-actions\" v-if=\"!isLoading\">\n      <router-link to=\"/\">Back to Boards</router-link>\n    </div>\n  </div>\n</template>\n\n<script>\nimport boardsService from \"../services/BoardService\";\nimport BoardColumn from \"@/components/BoardColumn\";\n\nexport default {\n  name: \"cards-list\",\n  components: {\n    BoardColumn\n  },\n  data() {\n    return {\n      title: \"\",\n      boardId: 0,\n      isLoading: true,\n      errorMsg: \"\"\n    };\n  },\n  methods: {\n    retrieveCards() {\n      boardsService\n        .getCards(this.boardId)\n        .then(response => {\n          this.title = response.data.title;\n          this.$store.commit(\"SET_BOARD_CARDS\", response.data.cards);\n          this.isLoading = false;\n        })\n        .catch(error => {\n          if (error.response && error.response.status === 404) {\n            alert(\n              \"Board cards not available. This board may have been deleted or you have entered an invalid board ID.\"\n            );\n            this.$router.push(\"/\");\n          }\n        });\n    },\n    deleteBoard() {\n      if (confirm(\"Deleting this board deletes all cards. There's no undo. Are you sure?\")){\n        boardsService.deleteBoard(this.boardId)\n        .then(response =>{\n          if (response.status===200){\n            alert(\"Board successfully deleted.\");\n            this.$store.commit(\"DELETE_BOARD\",this.boardId);\n            this.$router.push(\"/\");\n          }\n        })\n        .catch(error=>{\n          if (error.response){\n            this.errorMsg = \"Error deleting board. Response was \"+error.response.statusText;\n          } else if (error.request){\n            this.errorMsg = \"Error deleting board. Server couldn't be reached.\"\n          }\n          else {\n            this.errorMsg = \"Error deleting board. Request could not be created.\"\n          }\n        });\n      }\n      \n    }\n  },\n  created() {\n    this.boardId = this.$route.params.id;\n    this.retrieveCards();\n  },\n  computed: {\n    planned() {\n      return this.$store.state.boardCards.filter(\n        card => card.status === \"Planned\"\n      );\n    },\n    inProgress() {\n      return this.$store.state.boardCards.filter(\n        card => card.status === \"In Progress\"\n      );\n    },\n    completed() {\n      return this.$store.state.boardCards.filter(\n        card => card.status === \"Completed\"\n      );\n    }\n  }\n};\n</script>\n\n<style>\n.boards {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-gap: 20px;\n}\n.board-actions {\n  text-align: center;\n  padding: 20px 0;\n}\n.board-actions a:link,\n.board-actions a:visited {\n  color: blue;\n  text-decoration: none;\n}\n.board-actions a:hover {\n  text-decoration: underline;\n}\n.btn.addNewCard {\n  color: #fff;\n  background-color: #508ca8;\n  border-color: #508ca8;\n}\n.header {\n  display: flex;\n  align-items: center;\n}\n.header h1 {\n  flex-grow: 1;\n}\n</style>\n"]}]}